name: CI/CD Pipeline

on:
  push:
    branches: [ develop, master ]
  pull_request:
    branches: [ develop, master ]

jobs:
  testar-app:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master')) ||
      (github.event_name == 'pull_request' && (github.base_ref == 'develop' || github.base_ref == 'master'))

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_TCP_PORT: 3396
        ports:
          - 3396:3396
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Configurar ambiente
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "DEBUGLOG=${{ secrets.DEBUGLOG }}" >> .env
          echo "SWAGGER_PROD_URL=${{ secrets.SWAGGER_PROD_URL }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "JWT_EXPIRATION_ACCESS_TOKEN=${{ secrets.JWT_EXPIRATION_ACCESS_TOKEN }}" >> .env
          echo "JWT_EXPIRATION_REFRESH_TOKEN=${{ secrets.JWT_EXPIRATION_REFRESH_TOKEN }}" >> .env
          echo "SALT=${{ secrets.SALT }}" >> .env
          echo "HOST=${{ secrets.HOST }}" >> .env
          echo "PASS=${{ secrets.PASS }}" >> .env

      - run: npm install

      - run: npx prisma migrate dev

      - run: npm run seed

      - run: npm test -- --forceExit

  buildar-docker-api:
    runs-on: ubuntu-latest
    needs: testar-app
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master')) ||
      (github.event_name == 'pull_request' && (github.base_ref == 'develop' || github.base_ref == 'master'))

    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configurar ambiente
        run: |
          cp .env.example .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env

      - uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.IMAGEM_DOCKER }}

  fazer-deploy:
    runs-on: ubuntu-latest
    needs: buildar-docker-api
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master')) ||
      (github.event_name == 'pull_request' && (github.base_ref == 'develop' || github.base_ref == 'master'))

    steps:
      - name: Criar pasta kube
        run: mkdir -p ~/.kube
  
      - name: Criar kubeconfig a partir do secret
        run: echo "${KUBECTL_CONFIG}" > ~/.kube/config
        env:
          KUBECTL_CONFIG: ${{ secrets.KUBECTL_CONFIG }}
  
      - run: chmod 600 ~/.kube/config
  
      - uses: actions/checkout@v4
  
      - uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
  
      - name: Verificar cluster
        run: |
          kubectl config get-contexts
          kubectl get nodes

      - name: Remover deployment anterior
        run: kubectl delete deployment personal-finance-api || true

      - run: sleep 10

      - run: kubectl apply -f deploy/personal-finance-api-deployment.yaml

      - run: sleep 30

      - name: Verificar status do deployment
        run: |
          kubectl get pods
          kubectl describe deploy/personal-finance-api
          kubectl logs deploy/personal-finance-api