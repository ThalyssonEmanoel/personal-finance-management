# GitHub Actions workflow para CI/CD completo (testes, build e deploy)
# A ideia é demonstrar como funciona esta configuração
# para então ser possível realizar o CI/CD de qualquer
# aplicação que você queira

name: CI/CD Pipeline

# Define quando o workflow será executado
on:
  push:
    branches: [ develop, master ]
  pull_request:
    branches: [ develop, master ]

# Variáveis de ambiente que poderão ser usadas nos Jobs para chamar elas é só fazer assim: ${env.VARIABLE_NAME}
# env:
#   # SENSÍVEIS 
#   DATABASE_URL: ${{ secrets.DATABASE_URL }}
#   SALT: ${{ secrets.SALT }}
#   JWT_SECRET: ${{ secrets.JWT_SECRET }}
#   JWT_EXPIRATION_ACCESS_TOKEN: ${{ secrets.JWT_EXPIRATION_ACCESS_TOKEN }}
#   JWT_EXPIRATION_REFRESH_TOKEN: ${{ secrets.JWT_EXPIRATION_REFRESH_TOKEN }}
#   KUBECTL_CONFIG: ${{ secrets.KUBECTL_CONFIG }}
#   DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
#   DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
#   MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
#   MYSQL_USER: ${{ secrets.MYSQL_USER }}
#   MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
#   MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}

  # NÃO SENSÍVEIS 
  IMAGEM_DOCKER: thalyssoemanoel/personal-finance-api:latest
  PORT: 8080
  DEBUGLOG: "false"
  SWAGGER_PROD_URL: "https://personal-finance-api.app.fslab.dev"

# Define os jobs que serão executados
jobs:
  # Este Job irá executar todos os testes da aplicação
  # A ideia é que se os testes falharem os próximos Jobs não serão executados
  testar-app:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master') ||
        github.event_name == 'pull_request' && (github.base_ref == 'develop' || github.base_ref == 'master')

    # Serviços necessários para os testes
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Configurar ambiente
        run: |
          echo "DATABASE_URL=\"mysql://${{ secrets.MYSQL_USER }}:${{ secrets.MYSQL_ROOT_PASSWORD }}@localhost:3306/${{ secrets.MYSQL_DATABASE }}\"" > .env
          echo "PORT=${{ env.PORT }}" >> .env
          echo "DEBUGLOG=${{ env.DEBUGLOG }}" >> .env
          echo "SWAGGER_PROD_URL=${{ env.SWAGGER_PROD_URL }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "JWT_EXPIRATION_ACCESS_TOKEN=${{ secrets.JWT_EXPIRATION_ACCESS_TOKEN }}" >> .env
          echo "JWT_EXPIRATION_REFRESH_TOKEN=${{ secrets.JWT_EXPIRATION_REFRESH_TOKEN }}" >> .env
          echo "SALT=${{ secrets.SALT }}" >> .env
        env:
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION_ACCESS_TOKEN: ${{ secrets.JWT_EXPIRATION_ACCESS_TOKEN }}
          JWT_EXPIRATION_REFRESH_TOKEN: ${{ secrets.JWT_EXPIRATION_REFRESH_TOKEN }}
          SALT: ${{ secrets.SALT }}

      - name: Instalar dependências
        run: npm install

      - name: Executar migrações do Prisma
        run: npx prisma migrate dev

      - name: Executar seed do banco
        run: npm run seed

      - name: Executar testes
        run: npm test -- --forceExit

  # Job para build e push da imagem Docker
  buildar-docker-api:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master') || github.event_name == 'pull_request' && (github.base_ref == 'develop' || github.base_ref == 'master')
    needs: testar-app

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${env.DOCKERHUB_USERNAME}
          password: ${env.DOCKERHUB_TOKEN}

      - name: Configurar ambiente
        run: |
          cp .env.example .env
          echo "DATABASE_URL=${{ env.DATABASE_URL }}" >> .env

      - name: Build e Push da imagem Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.IMAGEM_DOCKER }}

  # Job para fazer o deploy
  fazer-deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master') || github.event_name == 'pull_request' && (github.base_ref == 'develop' || github.base_ref == 'master')
    needs: buildar-docker-api

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configurar kubectl
        run: |
          echo "${{ env.KUBECTL_CONFIG }}" | base64 -d > ~/.kube/config

      - name: Verificar cluster
        run: |
          kubectl config get-contexts
          kubectl get node
          kubectl get pods

      - name: Remover deployment anterior
        run: |
          kubectl delete deployment personal-finance-api || true

      - name: Aguardar remoção
        run: sleep 10

      - name: Aplicar novo deployment
        run: kubectl apply -f deploy/personal-finance-api-deployment.yaml

      - name: Aguardar deployment
        run: sleep 60

      - name: Verificar status do deployment
        run: |
          kubectl get pods
          kubectl describe deploy/personal-finance-api
          kubectl logs deploy/personal-finance-api
